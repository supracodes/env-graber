<?phpnamespace App\Console\Commands;use Illuminate\Console\Command;use Illuminate\Support\Collection;use M1\Env\Parser;use function Termwind\render;class GrabEnvCommand extends Command{    protected $signature = 'env:grab {--path=lists : The path that the .env files is located}';    protected $description = 'Command description';    public function handle(): void    {        $path = $this->option('path');        $files = collect(scandir($path) ?? [])->skip(2);        if (!is_dir('results')) {            mkdir('results');        }        foreach ($files as $file) {            try {                $envContents = file_get_contents("{$path}/{$file}");                $envData = Parser::parse($envContents);                $appEnv = str(collect($envData)->get('APP_ENV'));                $this->getAws($envData);                $this->getStripe($envData);                $this->getSmtp($envData);                $this->getDatabase($envData);                $this->getNexmo($envData);                $this->getTwilio($envData);                $this->info("File: {$file} - {$appEnv}");            } catch (\Exception $e) {                file_put_contents('results/errors.txt', "{$file} {$e->getMessage()}" . PHP_EOL, FILE_APPEND);                $this->error("{$file} {$e->getMessage()}", false);            }        }    }    private function output(array $data) {        $data = collect($data)->map(fn ($value, $key) => <<<HTML            <div class="flex space-x-1">                <span class="font-bold">{$key}</span>                <span class="flex-1 content-repeat-[.] text-gray"></span>                <span class="font-bold text-green">{$value}</span>            </div>        HTML)->implode(PHP_EOL);        render(<<<HTML            <div class="mx-2 my-1">{$data}</div>        HTML);    }    public function error($string, $exit = true)    {        render("<div class='text-red-500 ml-2'>{$string}</div>");        if ($exit) {            exit;        }    }    public function info($string, $verbose = false)    {        render("<div class='text-green-500 ml-2'>{$string}</div>");    }    private function getSmtp(array $env): \Illuminate\Support\Collection    {        $env = collect($env)->only([            'MAIL_MAILER',            'MAIL_HOST',            'MAIL_PORT',            'MAIL_USERNAME',            'MAIL_PASSWORD',            'MAIL_ENCRYPTION',            'MAIL_FROM_ADDRESS',            'MAIL_FROM_NAME',        ]);        if ($env->isNotEmpty()) {            $this->saveEnv('smtp.txt', $env);        }        return $env;    }    private function getStripe(array $env): \Illuminate\Support\Collection    {        $env = collect($env)->filter(fn ($value, $key) => str($key)->isMatch('/STRIPE/'));        if ($env->isNotEmpty()) {            $this->saveEnv('stripe.txt', $env);        }        return $env;    }    private function getAws(array $env): \Illuminate\Support\Collection    {        $env = collect($env)->filter(fn ($value, $key) => str($key)->isMatch('/AWS/') && str($value)->isNotEmpty());        if ($env->isNotEmpty()) {            $this->saveEnv('aws.txt', $env);        }        return $env;    }    private function getDatabase(?array $envData): \Illuminate\Support\Collection    {        $env = collect($envData)->filter(fn ($value, $key) => str($key)->isMatch('/DB_/'));        if ($env->isNotEmpty()) {            $this->saveEnv('database.txt', $env);        }        return $env;    }    private function getNexmo(?array $envData): \Illuminate\Support\Collection    {        $env = collect($envData)->filter(fn ($value, $key) => str($key)->isMatch('/NEXMO/'));        if ($env->isNotEmpty()) {            $this->saveEnv('nexmo.txt', $env);        }        return $env;    }    private function getTwilio(?array $envData): \Illuminate\Support\Collection    {        $env = collect($envData)->filter(fn ($value, $key) => str($key)->isMatch('/TWILIO/'));        if ($env->isNotEmpty()) {            $this->saveEnv('twilio.txt', $env);        }        return $env;    }    private function saveEnv(string $filename, Collection $env)    {        $env = $env->map(fn ($value, $key) => "{$key}={$value}")->implode(PHP_EOL);        file_put_contents(            'results/' . $filename, "{$env}\n====================\n",            FILE_APPEND        );    }}